from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram import F
from keyboards.profile_keyboard import profile_menu_keyboard
from keyboards.product_keyboard import product_menu_keyboard
from api_requests.user_requests import *
from api_requests.product_requsts import get_products
from middlewares.main_menu_middleware import MainMenuMiddleware
from states.profile_states import ProfileState


main_menu_router = Router()
main_menu_router.message.middleware(MainMenuMiddleware())


@main_menu_router.message(F.text == "üõç –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤")
async def view_products_handler(message: types.Message, state: FSMContext):
    print(await get_products(message.from_user.id))
    await message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç–æ–≤–∞—Ä—ã.", reply_markup=product_menu_keyboard())


@main_menu_router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def settings_handler(message: types.Message, state: FSMContext):
    await state.set_state(ProfileState.profile)
    
    data = await get_user_info(message.from_user.id)
    vk_markets = data[1]
    
    vk_accounts = data[0]
    
    await state.update_data(vk_accounts=vk_accounts, vk_markets=vk_markets)
    
    
    if len(vk_accounts) < 2:
        vk_accounts_text = "üë§ –í–∞—à VK –∞–∫–∫–∞—É–Ω—Ç:\n"
    else:
        vk_accounts_text = "üë§ –í–∞—à–∏ VK –∞–∫–∫–∞—É–Ω—Ç—ã:\n"
    for account in vk_accounts:
        status_emoji = "‚ú® " if account['active'] else "üí§ "
        vk_accounts_text += f"{status_emoji}{account['firstName']} {account['lastName']} ({account['screenName']})\n"
    vk_accounts_text += "\n"
    
    vk_markets_text = ""
    if len(vk_markets) == 0:
        vk_markets_text = "üõí –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö –≤ VK."
    else:
        if len(vk_markets) < 2:
            vk_markets_text = "üè¨ –í–∞—à –º–∞–≥–∞–∑–∏–Ω:\n"
        else:
            vk_markets_text = "üè¨ –í–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã:\n"
        for market in vk_markets:
            status_emoji = "‚ú® " if market['active'] else "üí§ "
            vk_markets_text += f"{status_emoji}{market['name']}\n"
        vk_markets_text += "\n" 
    
    if not any(market["active"] for market in vk_markets):
        vk_markets_text += "üßä –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞. \n–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n\n"
    
    text = vk_accounts_text + vk_markets_text
    
    await message.answer(
        "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n" + text + "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=profile_menu_keyboard()
    )