from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram import F
from clients.redis_client import redis
import json
from keyboards.product_keyboard import product_menu_keyboard
from keyboards.profile_keyboard import profile_menu_keyboard
from api_requests.product_requsts import get_products, get_product
from api_requests.user_requests import *
from middlewares.main_menu_middleware import MainMenuMiddleware
from aiogram.types.input_media_photo import InputMediaPhoto
from states.profile_states import ProfileState
from states.product_states import ProductState
from handlers.view.view_modules import build_profile_text
from utils.utils import format_product_caption_md
from logging import getLogger


logger = getLogger(__name__)


main_menu_router = Router()
main_menu_router.message.middleware(MainMenuMiddleware())


# TODO: —Å–¥–µ–ª–∞—Ç—å –∫–∞–∫ —Ç–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
@main_menu_router.message(F.text == "üõç –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤")
async def view_first_products(message: Message, state: FSMContext):
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ üõç –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤")
    
    user_id = message.from_user.id
    
    await state.set_state(ProductState.main_show)
    logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ main_show")
    
    count = 5
    data = await state.get_data()
    logger.debug("–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –∫–µ—à–∞ FSM: %s", data)

    current_index = data.get("current_index", None)
    logger.debug(f"Current index from cache: {current_index}")
    
    current_page = data.get("current_page", None)
    logger.debug(f"Current page from cache: {current_page}")
    
    total_count = data.get("total_count", None)
    logger.debug(f"Total count from cache: {total_count}")
    
    
    if current_index is None or \
        current_page is None or \
        total_count is None:
        
        logger.info("–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")

        current_index = 1
        current_page = 1
        
        await state.update_data(current_index=current_index,
                                current_page=current_page,
                                total_count=total_count)
        
        logger.debug(f"–û–±–Ω–æ–≤–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")

    logger.info("–ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞: %s, –∏–Ω–¥–µ–∫—Å: %s)", current_page, current_index)
    try:
        product_data = await get_products(message.from_user.id, count, current_page)
        logger.debug(f"–ü–æ–ª—É—á–∏–ª–∏ —Ç–æ–≤–∞—Ä—ã: {product_data}")
        products = product_data.get("products", None)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: %s", e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    logger.debug("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –∞–π–¥–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ %d", len(products), current_page)
    
    try:
        product = products[current_index-1]
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞: %s", e)
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    
    logger.info(f"–ü–æ–ª—É—á–∏–ª–∏ —Ç–æ–≤–∞—Ä: {product}")
        
    media = [InputMediaPhoto(media=url) for url in product['photo_urls']]
    photo_text = format_product_caption_md(product, current_index)
    media[0].caption = photo_text
    media[0].parse_mode = "MarkdownV2"
    
    await message.answer_media_group(media=media)
    logger.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ %s", product['id'])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=product_menu_keyboard(current_index, total_count))



@main_menu_router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: types.Message, state: FSMContext):
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    
    await state.set_state(ProfileState.profile)
    logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ profile")
    
    vk_accounts, vk_markets = await get_user_info(message.from_user.id)
    logger.info(f"–ü–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    logger.debug(f"–ü–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ê–∫–∫–∞—É–Ω—Ç—ã: {vk_accounts}, –º–∞–≥–∞–∑–∏–Ω—ã: {vk_markets}")
    
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: {vk_accounts}, –º–∞–≥–∞–∑–∏–Ω—ã: {vk_markets}")
    
    text = await build_profile_text(vk_accounts, vk_markets)
    await message.answer(text, reply_markup=profile_menu_keyboard())


@main_menu_router.callback_query(F.data == "update_profile")
async def update_profile_handler(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ update_profile")
    
    await state.set_state(ProfileState.profile)
    logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ profile")

    await callback.answer("")
    
    vk_accounts, vk_markets = await get_user_info(callback.from_user.id)
    
    text = await build_profile_text(vk_accounts, vk_markets)
    if text == callback.message.text:
        logger.debug(f"–¢–µ–∫—Å—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç.")
        return
    await callback.message.edit_text(text, reply_markup=profile_menu_keyboard())
